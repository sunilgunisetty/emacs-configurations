This set of configuration is specific to my developmemt environment.
#+STARTUP: content
* Interface tweeks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (defalias 'list-buffers 'ibuffer)
    (windmove-default-keybindings)
    (global-auto-revert-mode 1)
    (setq auto-revert-verbose nil)
    (show-paren-mode 1)
    (global-hl-line-mode t)
    ;;(global-linum-mode) ;; Not looking good in zenburn theme

    ;; disable the annoying bell ring
    (setq ring-bell-function 'ignore)

    ;; mode line settings
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t)

    ;; nice scrolling
    (setq scroll-margin 0
          scroll-conservatively 100000
          scroll-preserve-screen-position 1)

    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (when (display-graphic-p)
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
  #+END_SRC
  
* Package try
  Allows you try emacs packages without installing it.
  #+BEGIN_SRC emacs-lisp
   (use-package try
     :ensure t)
  #+END_SRC

* Package which key
  Used to display key bindings following currently entered incomplete key bindings. Example press C-x and wait for a second to see list of available key bindings.
  #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config
      (which-key-mode))
  #+END_SRC

* Autocomplete for emacs
  #+BEGIN_SRC emacs-lisp  
   (use-package auto-complete
     :ensure t
     :init
      (ac-config-default)
      (global-auto-complete-mode t))
  #+END_SRC
* Swiper 
  Better search
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      (("M-y" . counsel-yank-pop) ;; Better kill ring package
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-display-style 'fancy))
    (use-package swiper
      :ensure try
      :bind (("C-s" . swiper)
             ("C-r" . swiper)
             ("C-c C-r" . ivy-resume)
             ("M-x" .  counsel-M-x)
             ("C-x C-f" . counsel-find-file))
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffer t)
        (setq ivy-display-style 'fancy)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

  #+END_SRC
* Undo Tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC
* Tramp
  Tramp mode enables you to edit remote files. Its already available in emacs
  - To edit remote file C-x C-f /shh:user-name@your-remote-host:file-name
  - To edit local root file C-x C-f /sudo::path-your-local-file  -> password will be prompted
  - To edit remote root file C-x C-f /ssh:your-remote-host|sudo:your-remote-host:path-to-remote-file -> password will be prompted
  
* Projectile mode
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-on))
#+END_SRC
* LISP editing
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :bind (("C-c d" . paredit-forward-down))
    :config
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode))

  (use-package paredit-everywhere
    :ensure t
    :diminish paredit-everywhere-mode
    :config
    (add-hook 'prog-mode-hook #'paredit-everywhere-mode))

  (use-package highlight-parentheses
    :ensure t
    :diminish highlight-parentheses-mode
    :config
    (add-hook 'emacs-lisp-mode-hook
              (lambda()
                (highlight-parentheses-mode)
                )))

  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'lisp-mode-hook
              (lambda()
                (rainbow-delimiters-mode)
                )))

  (global-highlight-parentheses-mode)

#+END_SRC
* Emacs git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c m" . magit-status)))

  (use-package magit-gitflow
    :ensure t
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))
#+END_SRC
* Color theme
Best theme which works perfectly in iterm
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
#+END_SRC
* Multiple Cursors
Very useful for refactoring
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t)
#+END_SRC
* Clojure programming
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config
    (add-hook 'clojure-mode-hook #'paredit-mode)
    (add-hook 'clojure-mode-hook #'subword-mode)
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))

  (use-package company
    :ensure t
    :bind (("C-c /". company-complete))
    :config
    (global-company-mode))

  (use-package cider
    :ensure t
    :config
    (add-hook 'cider-mode-hook #'eldoc-mode)
    (add-hook 'cider-repl-mode-hook #'eldoc-mode)
    (add-hook 'cider-repl-mode-hook #'paredit-mode)
    (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Haskell programming
#+BEGIN_SRC emacs-lisp
  (use-package intero
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'intero-mode))
#+END_SRC
